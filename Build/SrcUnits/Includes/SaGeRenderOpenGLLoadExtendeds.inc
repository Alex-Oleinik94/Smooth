{$IFDEF SG_RENDER_EICR}
	SGIsSuppored_GL_version_1_2:= False;
	SGIsSuppored_GL_version_1_3:= False;
	SGIsSuppored_GL_ARB_imaging:= False;
	SGIsSuppored_GL_ARB_multitexture:= False;
	SGIsSuppored_GL_ARB_transpose_matrix:= False;
	SGIsSuppored_GL_ARB_multisample:= False;
	SGIsSuppored_GL_ARB_texture_env_add:= False;
	SGIsSuppored_WGL_ARB_extensions_string:= False;
	SGIsSuppored_WGL_ARB_buffer_region:= False;
	SGIsSuppored_GL_ARB_texture_cube_map:= False;
	SGIsSuppored_GL_ARB_depth_texture:= False;
	SGIsSuppored_GL_ARB_point_parameters:= False;
	SGIsSuppored_GL_ARB_shadow:= False;
	SGIsSuppored_GL_ARB_shadow_ambient:= False;
	SGIsSuppored_GL_ARB_texture_border_clamp:= False;
	SGIsSuppored_GL_ARB_texture_compression:= False;
	SGIsSuppored_GL_ARB_texture_env_combine:= False;
	SGIsSuppored_GL_ARB_texture_env_crossbar:= False;
	SGIsSuppored_GL_ARB_texture_env_dot3:= False;
	SGIsSuppored_GL_ARB_texture_mirrored_repeat:= False;
	SGIsSuppored_GL_ARB_vertex_blend:= False;
	SGIsSuppored_GL_ARB_vertex_program:= False;
	SGIsSuppored_GL_ARB_window_pos:= False;
	SGIsSuppored_GL_EXT_422_pixels:= False;
	SGIsSuppored_GL_EXT_bgra:= False;
	SGIsSuppored_GL_EXT_blend_color:= False;
	SGIsSuppored_GL_EXT_blend_func_separate:= False;
	SGIsSuppored_GL_EXT_blend_logic_op:= False;
	SGIsSuppored_GL_EXT_blend_minmax:= False;
	SGIsSuppored_GL_EXT_blend_subtract:= False;
	SGIsSuppored_GL_EXT_clip_volume_hint:= False;
	SGIsSuppored_GL_EXT_color_subtable:= False;
	SGIsSuppored_GL_EXT_compiled_vertex_array:= False;
	SGIsSuppored_GL_EXT_convolution:= False;
	SGIsSuppored_GL_EXT_fog_coord:= False;
	SGIsSuppored_GL_EXT_histogram:= False;
	SGIsSuppored_GL_EXT_multi_draw_arrays:= False;
	SGIsSuppored_GL_EXT_packed_depth_stencil:= False;
	SGIsSuppored_GL_EXT_packed_pixels:= False;
	SGIsSuppored_GL_EXT_paletted_texture:= False;
	SGIsSuppored_GL_EXT_point_parameters:= False;
	SGIsSuppored_GL_EXT_polygon_offset:= False;
	SGIsSuppored_GL_EXT_secondary_color:= False;
	SGIsSuppored_GL_EXT_separate_specular_color:= False;
	SGIsSuppored_GL_EXT_shadow_funcs:= False;
	SGIsSuppored_GL_EXT_shared_texture_palette:= False;
	SGIsSuppored_GL_EXT_stencil_two_side:= False;
	SGIsSuppored_GL_EXT_stencil_wrap:= False;
	SGIsSuppored_GL_EXT_subtexture:= False;
	SGIsSuppored_GL_EXT_texture3D:= False;
	SGIsSuppored_GL_EXT_texture_compression_s3tc:= False;
	SGIsSuppored_GL_EXT_texture_env_add:= False;
	SGIsSuppored_GL_EXT_texture_env_combine:= False;
	SGIsSuppored_GL_EXT_texture_env_dot3:= False;
	SGIsSuppored_GL_EXT_texture_filter_anisotropic:= False;
	SGIsSuppored_GL_EXT_texture_lod_bias:= False;
	SGIsSuppored_GL_EXT_texture_object:= False;
	SGIsSuppored_GL_EXT_vertex_array:= False;
	SGIsSuppored_GL_EXT_vertex_shader:= False;
	SGIsSuppored_GL_EXT_vertex_weighting:= False;
	SGIsSuppored_GL_HP_occlusion_test:= False;
	SGIsSuppored_GL_NV_blend_square:= False;
	SGIsSuppored_GL_NV_copy_depth_to_color:= False;
	SGIsSuppored_GL_NV_depth_clamp:= False;
	SGIsSuppored_GL_NV_evaluators:= False;
	SGIsSuppored_GL_NV_fence:= False;
	SGIsSuppored_GL_NV_fog_distance:= False;
	SGIsSuppored_GL_NV_light_max_exponent:= False;
	SGIsSuppored_GL_NV_multisample_filter_hint:= False;
	SGIsSuppored_GL_NV_occlusion_query:= False;
	SGIsSuppored_GL_NV_packed_depth_stencil:= False;
	SGIsSuppored_GL_NV_point_sprite:= False;
	SGIsSuppored_GL_NV_register_combiners:= False;
	SGIsSuppored_GL_NV_register_combiners2:= False;
	SGIsSuppored_GL_NV_texgen_emboss:= False;
	SGIsSuppored_GL_NV_texgen_reflection:= False;
	SGIsSuppored_GL_NV_texture_compression_vtc:= False;
	SGIsSuppored_GL_NV_texture_env_combine4:= False;
	SGIsSuppored_GL_NV_texture_rectangle:= False;
	SGIsSuppored_GL_NV_texture_shader:= False;
	SGIsSuppored_GL_NV_texture_shader2:= False;
	SGIsSuppored_GL_NV_texture_shader3:= False;
	SGIsSuppored_GL_NV_vertex_array_range:= False;
	SGIsSuppored_GL_NV_vertex_array_range2:= False;
	SGIsSuppored_GL_NV_vertex_program:= False;
	SGIsSuppored_GL_NV_vertex_program1_1:= False;
	SGIsSuppored_GL_ATI_element_array:= False;
	SGIsSuppored_GL_ATI_envmap_bumpmap:= False;
	SGIsSuppored_GL_ATI_fragment_shader:= False;
	SGIsSuppored_GL_ATI_pn_triangles:= False;
	SGIsSuppored_GL_ATI_texture_mirror_once:= False;
	SGIsSuppored_GL_ATI_vertex_array_object:= False;
	SGIsSuppored_GL_ATI_vertex_streams:= False;
	SGIsSuppored_WGL_I3D_image_buffer:= False;
	SGIsSuppored_WGL_I3D_swap_frame_lock:= False;
	SGIsSuppored_WGL_I3D_swap_frame_usage:= False;
	SGIsSuppored_GL_3DFX_texture_compression_FXT1:= False;
	SGIsSuppored_GL_IBM_cull_vertex:= False;
	SGIsSuppored_GL_IBM_multimode_draw_arrays:= False;
	SGIsSuppored_GL_IBM_raster_pos_clip:= False;
	SGIsSuppored_GL_IBM_texture_mirrored_repeat:= False;
	SGIsSuppored_GL_IBM_vertex_array_lists:= False;
	SGIsSuppored_GL_MESA_resize_buffers:= False;
	SGIsSuppored_GL_MESA_window_pos:= False;
	SGIsSuppored_GL_OML_interlace:= False;
	SGIsSuppored_GL_OML_resample:= False;
	SGIsSuppored_GL_OML_subsample:= False;
	SGIsSuppored_GL_SGIS_generate_mipmap:= False;
	SGIsSuppored_GL_SGIS_multisample:= False;
	SGIsSuppored_GL_SGIS_pixel_texture:= False;
	SGIsSuppored_GL_SGIS_texture_border_clamp:= False;
	SGIsSuppored_GL_SGIS_texture_color_mask:= False;
	SGIsSuppored_GL_SGIS_texture_edge_clamp:= False;
	SGIsSuppored_GL_SGIS_texture_lod:= False;
	SGIsSuppored_GL_SGIS_depth_texture:= False;
	SGIsSuppored_GL_SGIX_fog_offset:= False;
	SGIsSuppored_GL_SGIX_interlace:= False;
	SGIsSuppored_GL_SGIX_shadow_ambient:= False;
	SGIsSuppored_GL_SGI_color_matrix:= False;
	SGIsSuppored_GL_SGI_color_table:= False;
	SGIsSuppored_GL_SGI_texture_color_table:= False;
	SGIsSuppored_GL_SUN_vertex:= False;
	SGIsSuppored_GL_ARB_fragment_program:= False;
	SGIsSuppored_GL_ATI_text_fragment_shader:= False;
	SGIsSuppored_GL_ARB_vertex_buffer_object:= False;
	SGIsSuppored_GL_APPLE_client_storage:= False;
	SGIsSuppored_GL_APPLE_element_array:= False;
	SGIsSuppored_GL_APPLE_fence:= False;
	SGIsSuppored_GL_APPLE_vertex_array_object:= False;
	SGIsSuppored_GL_APPLE_vertex_array_range:= False;
	SGIsSuppored_WGL_ARB_pixel_format:= False;
	SGIsSuppored_WGL_ARB_make_current_read:= False;
	SGIsSuppored_WGL_ARB_pbuffer:= False;
	SGIsSuppored_WGL_EXT_swap_control:= False;
	SGIsSuppored_WGL_ARB_render_texture:= False;
	SGIsSuppored_WGL_EXT_extensions_string:= False;
	SGIsSuppored_WGL_EXT_make_current_read:= False;
	SGIsSuppored_WGL_EXT_pbuffer:= False;
	SGIsSuppored_WGL_EXT_pixel_format:= False;
	SGIsSuppored_WGL_I3D_digital_video_control:= False;
	SGIsSuppored_WGL_I3D_gamma:= False;
	SGIsSuppored_WGL_I3D_genlock:= False;
	SGIsSuppored_GL_ARB_matrix_palette:= False;
	SGIsSuppored_GL_NV_element_array:= False;
	SGIsSuppored_GL_NV_float_buffer:= False;
	SGIsSuppored_GL_NV_fragment_program:= False;
	SGIsSuppored_GL_NV_primitive_restart:= False;
	SGIsSuppored_GL_NV_vertex_program2:= False;
	SGIsSuppored_WGL_NV_render_texture_rectangle:= False;
	SGIsSuppored_GL_NV_pixel_data_range:= False;
	SGIsSuppored_GL_EXT_texture_rectangle:= False;
	SGIsSuppored_GL_S3_s3tc:= False;
	SGIsSuppored_GL_ATI_draw_buffers:= False;
	SGIsSuppored_WGL_ATI_pixel_format_float:= False;
	SGIsSuppored_GL_ATI_texture_env_combine3:= False;
	SGIsSuppored_GL_ATI_texture_float:= False;
	SGIsSuppored_GL_NV_texture_expand_normal:= False;
	SGIsSuppored_GL_NV_half_float:= False;
	SGIsSuppored_GL_ATI_map_object_buffer:= False;
	SGIsSuppored_GL_ATI_separate_stencil:= False;
	SGIsSuppored_GL_ATI_vertex_attrib_array_object:= False;
	SGIsSuppored_GL_ARB_occlusion_query:= False;
	SGIsSuppored_GL_ARB_shader_objects:= False;
	SGIsSuppored_GL_ARB_vertex_shader:= False;
	SGIsSuppored_GL_ARB_fragment_shader:= False;
	SGIsSuppored_GL_ARB_shading_language_100:= False;
	SGIsSuppored_GL_ARB_texture_non_power_of_two:= False;
	SGIsSuppored_GL_ARB_point_sprite:= False;
	SGIsSuppored_GL_EXT_depth_bounds_test:= False;
	SGIsSuppored_GL_EXT_texture_mirror_clamp:= False;
	SGIsSuppored_GL_EXT_blend_equation_separate:= False;
	SGIsSuppored_GL_MESA_pack_invert:= False;
	SGIsSuppored_GL_MESA_ycbcr_texture:= False;
	SGIsSuppored_GL_ARB_fragment_program_shadow:= False;
	SGIsSuppored_GL_NV_fragment_program_option:= False;
	SGIsSuppored_GL_EXT_pixel_buffer_object:= False;
	SGIsSuppored_GL_NV_fragment_program2:= False;
	SGIsSuppored_GL_NV_vertex_program2_option:= False;
	SGIsSuppored_GL_NV_vertex_program3:= False;
	SGIsSuppored_GL_ARB_draw_buffers:= False;
	SGIsSuppored_GL_ARB_texture_rectangle:= False;
	SGIsSuppored_GL_ARB_color_buffer_float:= False;
	SGIsSuppored_GL_ARB_half_float_pixel:= False;
	SGIsSuppored_GL_ARB_texture_float:= False;
	SGIsSuppored_GL_EXT_texture_compression_dxt1:= False;
	SGIsSuppored_GL_ARB_pixel_buffer_object:= False;
	SGIsSuppored_GL_EXT_framebuffer_object:= False;
	SGIsSuppored_GL_ARB_framebuffer_object:= False;
	SGIsSuppored_GL_ARB_map_buffer_range:= False;
	SGIsSuppored_GL_ARB_vertex_array_object:= False;
	SGIsSuppored_GL_ARB_copy_buffer:= False;
	SGIsSuppored_GL_ARB_uniform_buffer_object:= False;
	SGIsSuppored_GL_ARB_draw_elements_base_vertex:= False;
	SGIsSuppored_GL_ARB_provoking_vertex:= False;
	SGIsSuppored_GL_ARB_sync:= False;
	SGIsSuppored_GL_ARB_texture_multisample:= False;
	SGIsSuppored_GL_ARB_blend_func_extended:= False;
	SGIsSuppored_GL_ARB_sampler_objects:= False;
	SGIsSuppored_GL_ARB_timer_query:= False;
	SGIsSuppored_GL_ARB_vertex_type_2_10_10_10_rev:= False;
	SGIsSuppored_GL_ARB_gpu_shader_fp64:= False;
	SGIsSuppored_GL_ARB_shader_subroutine:= False;
	SGIsSuppored_GL_ARB_tessellation_shader:= False;
	SGIsSuppored_GL_ARB_transform_feedback2:= False;
	SGIsSuppored_GL_ARB_transform_feedback3:= False;
	SGIsSuppored_GL_version_1_4:= False;
	SGIsSuppored_GL_version_1_5:= False;
	SGIsSuppored_GL_version_2_0:= False;
	SGIsSuppored_GL_VERSION_2_1:= False;
	SGIsSuppored_GL_VERSION_3_0:= False;
	SGIsSuppored_GL_VERSION_3_1:= False;
	SGIsSuppored_GL_VERSION_3_2:= False;
	SGIsSuppored_GL_VERSION_3_3:= False;
	SGIsSuppored_GL_VERSION_4_0:= False;
{$ENDIF}



{$IFDEF SG_RENDER_EIC}
	SGIsSuppored_GL_version_1_2:Boolean {= False};
	SGIsSuppored_GL_version_1_3:Boolean {= False};
	SGIsSuppored_GL_ARB_imaging:Boolean {= False};
	SGIsSuppored_GL_ARB_multitexture:Boolean {= False};
	SGIsSuppored_GL_ARB_transpose_matrix:Boolean {= False};
	SGIsSuppored_GL_ARB_multisample:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_env_add:Boolean {= False};
	SGIsSuppored_WGL_ARB_extensions_string:Boolean {= False};
	SGIsSuppored_WGL_ARB_buffer_region:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_cube_map:Boolean {= False};
	SGIsSuppored_GL_ARB_depth_texture:Boolean {= False};
	SGIsSuppored_GL_ARB_point_parameters:Boolean {= False};
	SGIsSuppored_GL_ARB_shadow:Boolean {= False};
	SGIsSuppored_GL_ARB_shadow_ambient:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_border_clamp:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_compression:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_env_combine:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_env_crossbar:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_env_dot3:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_mirrored_repeat:Boolean {= False};
	SGIsSuppored_GL_ARB_vertex_blend:Boolean {= False};
	SGIsSuppored_GL_ARB_vertex_program:Boolean {= False};
	SGIsSuppored_GL_ARB_window_pos:Boolean {= False};
	SGIsSuppored_GL_EXT_422_pixels:Boolean {= False};
	SGIsSuppored_GL_EXT_bgra:Boolean {= False};
	SGIsSuppored_GL_EXT_blend_color:Boolean {= False};
	SGIsSuppored_GL_EXT_blend_func_separate:Boolean {= False};
	SGIsSuppored_GL_EXT_blend_logic_op:Boolean {= False};
	SGIsSuppored_GL_EXT_blend_minmax:Boolean {= False};
	SGIsSuppored_GL_EXT_blend_subtract:Boolean {= False};
	SGIsSuppored_GL_EXT_clip_volume_hint:Boolean {= False};
	SGIsSuppored_GL_EXT_color_subtable:Boolean {= False};
	SGIsSuppored_GL_EXT_compiled_vertex_array:Boolean {= False};
	SGIsSuppored_GL_EXT_convolution:Boolean {= False};
	SGIsSuppored_GL_EXT_fog_coord:Boolean {= False};
	SGIsSuppored_GL_EXT_histogram:Boolean {= False};
	SGIsSuppored_GL_EXT_multi_draw_arrays:Boolean {= False};
	SGIsSuppored_GL_EXT_packed_depth_stencil:Boolean {= False};
	SGIsSuppored_GL_EXT_packed_pixels:Boolean {= False};
	SGIsSuppored_GL_EXT_paletted_texture:Boolean {= False};
	SGIsSuppored_GL_EXT_point_parameters:Boolean {= False};
	SGIsSuppored_GL_EXT_polygon_offset:Boolean {= False};
	SGIsSuppored_GL_EXT_secondary_color:Boolean {= False};
	SGIsSuppored_GL_EXT_separate_specular_color:Boolean {= False};
	SGIsSuppored_GL_EXT_shadow_funcs:Boolean {= False};
	SGIsSuppored_GL_EXT_shared_texture_palette:Boolean {= False};
	SGIsSuppored_GL_EXT_stencil_two_side:Boolean {= False};
	SGIsSuppored_GL_EXT_stencil_wrap:Boolean {= False};
	SGIsSuppored_GL_EXT_subtexture:Boolean {= False};
	SGIsSuppored_GL_EXT_texture3D:Boolean {= False};
	SGIsSuppored_GL_EXT_texture_compression_s3tc:Boolean {= False};
	SGIsSuppored_GL_EXT_texture_env_add:Boolean {= False};
	SGIsSuppored_GL_EXT_texture_env_combine:Boolean {= False};
	SGIsSuppored_GL_EXT_texture_env_dot3:Boolean {= False};
	SGIsSuppored_GL_EXT_texture_filter_anisotropic:Boolean {= False};
	SGIsSuppored_GL_EXT_texture_lod_bias:Boolean {= False};
	SGIsSuppored_GL_EXT_texture_object:Boolean {= False};
	SGIsSuppored_GL_EXT_vertex_array:Boolean {= False};
	SGIsSuppored_GL_EXT_vertex_shader:Boolean {= False};
	SGIsSuppored_GL_EXT_vertex_weighting:Boolean {= False};
	SGIsSuppored_GL_HP_occlusion_test:Boolean {= False};
	SGIsSuppored_GL_NV_blend_square:Boolean {= False};
	SGIsSuppored_GL_NV_copy_depth_to_color:Boolean {= False};
	SGIsSuppored_GL_NV_depth_clamp:Boolean {= False};
	SGIsSuppored_GL_NV_evaluators:Boolean {= False};
	SGIsSuppored_GL_NV_fence:Boolean {= False};
	SGIsSuppored_GL_NV_fog_distance:Boolean {= False};
	SGIsSuppored_GL_NV_light_max_exponent:Boolean {= False};
	SGIsSuppored_GL_NV_multisample_filter_hint:Boolean {= False};
	SGIsSuppored_GL_NV_occlusion_query:Boolean {= False};
	SGIsSuppored_GL_NV_packed_depth_stencil:Boolean {= False};
	SGIsSuppored_GL_NV_point_sprite:Boolean {= False};
	SGIsSuppored_GL_NV_register_combiners:Boolean {= False};
	SGIsSuppored_GL_NV_register_combiners2:Boolean {= False};
	SGIsSuppored_GL_NV_texgen_emboss:Boolean {= False};
	SGIsSuppored_GL_NV_texgen_reflection:Boolean {= False};
	SGIsSuppored_GL_NV_texture_compression_vtc:Boolean {= False};
	SGIsSuppored_GL_NV_texture_env_combine4:Boolean {= False};
	SGIsSuppored_GL_NV_texture_rectangle:Boolean {= False};
	SGIsSuppored_GL_NV_texture_shader:Boolean {= False};
	SGIsSuppored_GL_NV_texture_shader2:Boolean {= False};
	SGIsSuppored_GL_NV_texture_shader3:Boolean {= False};
	SGIsSuppored_GL_NV_vertex_array_range:Boolean {= False};
	SGIsSuppored_GL_NV_vertex_array_range2:Boolean {= False};
	SGIsSuppored_GL_NV_vertex_program:Boolean {= False};
	SGIsSuppored_GL_NV_vertex_program1_1:Boolean {= False};
	SGIsSuppored_GL_ATI_element_array:Boolean {= False};
	SGIsSuppored_GL_ATI_envmap_bumpmap:Boolean {= False};
	SGIsSuppored_GL_ATI_fragment_shader:Boolean {= False};
	SGIsSuppored_GL_ATI_pn_triangles:Boolean {= False};
	SGIsSuppored_GL_ATI_texture_mirror_once:Boolean {= False};
	SGIsSuppored_GL_ATI_vertex_array_object:Boolean {= False};
	SGIsSuppored_GL_ATI_vertex_streams:Boolean {= False};
	SGIsSuppored_WGL_I3D_image_buffer:Boolean {= False};
	SGIsSuppored_WGL_I3D_swap_frame_lock:Boolean {= False};
	SGIsSuppored_WGL_I3D_swap_frame_usage:Boolean {= False};
	SGIsSuppored_GL_3DFX_texture_compression_FXT1:Boolean {= False};
	SGIsSuppored_GL_IBM_cull_vertex:Boolean {= False};
	SGIsSuppored_GL_IBM_multimode_draw_arrays:Boolean {= False};
	SGIsSuppored_GL_IBM_raster_pos_clip:Boolean {= False};
	SGIsSuppored_GL_IBM_texture_mirrored_repeat:Boolean {= False};
	SGIsSuppored_GL_IBM_vertex_array_lists:Boolean {= False};
	SGIsSuppored_GL_MESA_resize_buffers:Boolean {= False};
	SGIsSuppored_GL_MESA_window_pos:Boolean {= False};
	SGIsSuppored_GL_OML_interlace:Boolean {= False};
	SGIsSuppored_GL_OML_resample:Boolean {= False};
	SGIsSuppored_GL_OML_subsample:Boolean {= False};
	SGIsSuppored_GL_SGIS_generate_mipmap:Boolean {= False};
	SGIsSuppored_GL_SGIS_multisample:Boolean {= False};
	SGIsSuppored_GL_SGIS_pixel_texture:Boolean {= False};
	SGIsSuppored_GL_SGIS_texture_border_clamp:Boolean {= False};
	SGIsSuppored_GL_SGIS_texture_color_mask:Boolean {= False};
	SGIsSuppored_GL_SGIS_texture_edge_clamp:Boolean {= False};
	SGIsSuppored_GL_SGIS_texture_lod:Boolean {= False};
	SGIsSuppored_GL_SGIS_depth_texture:Boolean {= False};
	SGIsSuppored_GL_SGIX_fog_offset:Boolean {= False};
	SGIsSuppored_GL_SGIX_interlace:Boolean {= False};
	SGIsSuppored_GL_SGIX_shadow_ambient:Boolean {= False};
	SGIsSuppored_GL_SGI_color_matrix:Boolean {= False};
	SGIsSuppored_GL_SGI_color_table:Boolean {= False};
	SGIsSuppored_GL_SGI_texture_color_table:Boolean {= False};
	SGIsSuppored_GL_SUN_vertex:Boolean {= False};
	SGIsSuppored_GL_ARB_fragment_program:Boolean {= False};
	SGIsSuppored_GL_ATI_text_fragment_shader:Boolean {= False};
	SGIsSuppored_GL_ARB_vertex_buffer_object:Boolean {= False};
	SGIsSuppored_GL_APPLE_client_storage:Boolean {= False};
	SGIsSuppored_GL_APPLE_element_array:Boolean {= False};
	SGIsSuppored_GL_APPLE_fence:Boolean {= False};
	SGIsSuppored_GL_APPLE_vertex_array_object:Boolean {= False};
	SGIsSuppored_GL_APPLE_vertex_array_range:Boolean {= False};
	SGIsSuppored_WGL_ARB_pixel_format:Boolean {= False};
	SGIsSuppored_WGL_ARB_make_current_read:Boolean {= False};
	SGIsSuppored_WGL_ARB_pbuffer:Boolean {= False};
	SGIsSuppored_WGL_EXT_swap_control:Boolean {= False};
	SGIsSuppored_WGL_ARB_render_texture:Boolean {= False};
	SGIsSuppored_WGL_EXT_extensions_string:Boolean {= False};
	SGIsSuppored_WGL_EXT_make_current_read:Boolean {= False};
	SGIsSuppored_WGL_EXT_pbuffer:Boolean {= False};
	SGIsSuppored_WGL_EXT_pixel_format:Boolean {= False};
	SGIsSuppored_WGL_I3D_digital_video_control:Boolean {= False};
	SGIsSuppored_WGL_I3D_gamma:Boolean {= False};
	SGIsSuppored_WGL_I3D_genlock:Boolean {= False};
	SGIsSuppored_GL_ARB_matrix_palette:Boolean {= False};
	SGIsSuppored_GL_NV_element_array:Boolean {= False};
	SGIsSuppored_GL_NV_float_buffer:Boolean {= False};
	SGIsSuppored_GL_NV_fragment_program:Boolean {= False};
	SGIsSuppored_GL_NV_primitive_restart:Boolean {= False};
	SGIsSuppored_GL_NV_vertex_program2:Boolean {= False};
	SGIsSuppored_WGL_NV_render_texture_rectangle:Boolean {= False};
	SGIsSuppored_GL_NV_pixel_data_range:Boolean {= False};
	SGIsSuppored_GL_EXT_texture_rectangle:Boolean {= False};
	SGIsSuppored_GL_S3_s3tc:Boolean {= False};
	SGIsSuppored_GL_ATI_draw_buffers:Boolean {= False};
	SGIsSuppored_WGL_ATI_pixel_format_float:Boolean {= False};
	SGIsSuppored_GL_ATI_texture_env_combine3:Boolean {= False};
	SGIsSuppored_GL_ATI_texture_float:Boolean {= False};
	SGIsSuppored_GL_NV_texture_expand_normal:Boolean {= False};
	SGIsSuppored_GL_NV_half_float:Boolean {= False};
	SGIsSuppored_GL_ATI_map_object_buffer:Boolean {= False};
	SGIsSuppored_GL_ATI_separate_stencil:Boolean {= False};
	SGIsSuppored_GL_ATI_vertex_attrib_array_object:Boolean {= False};
	SGIsSuppored_GL_ARB_occlusion_query:Boolean {= False};
	SGIsSuppored_GL_ARB_shader_objects:Boolean {= False};
	SGIsSuppored_GL_ARB_vertex_shader:Boolean {= False};
	SGIsSuppored_GL_ARB_fragment_shader:Boolean {= False};
	SGIsSuppored_GL_ARB_shading_language_100:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_non_power_of_two:Boolean {= False};
	SGIsSuppored_GL_ARB_point_sprite:Boolean {= False};
	SGIsSuppored_GL_EXT_depth_bounds_test:Boolean {= False};
	SGIsSuppored_GL_EXT_texture_mirror_clamp:Boolean {= False};
	SGIsSuppored_GL_EXT_blend_equation_separate:Boolean {= False};
	SGIsSuppored_GL_MESA_pack_invert:Boolean {= False};
	SGIsSuppored_GL_MESA_ycbcr_texture:Boolean {= False};
	SGIsSuppored_GL_ARB_fragment_program_shadow:Boolean {= False};
	SGIsSuppored_GL_NV_fragment_program_option:Boolean {= False};
	SGIsSuppored_GL_EXT_pixel_buffer_object:Boolean {= False};
	SGIsSuppored_GL_NV_fragment_program2:Boolean {= False};
	SGIsSuppored_GL_NV_vertex_program2_option:Boolean {= False};
	SGIsSuppored_GL_NV_vertex_program3:Boolean {= False};
	SGIsSuppored_GL_ARB_draw_buffers:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_rectangle:Boolean {= False};
	SGIsSuppored_GL_ARB_color_buffer_float:Boolean {= False};
	SGIsSuppored_GL_ARB_half_float_pixel:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_float:Boolean {= False};
	SGIsSuppored_GL_EXT_texture_compression_dxt1:Boolean {= False};
	SGIsSuppored_GL_ARB_pixel_buffer_object:Boolean {= False};
	SGIsSuppored_GL_EXT_framebuffer_object:Boolean {= False};
	SGIsSuppored_GL_ARB_framebuffer_object:Boolean {= False};
	SGIsSuppored_GL_ARB_map_buffer_range:Boolean {= False};
	SGIsSuppored_GL_ARB_vertex_array_object:Boolean {= False};
	SGIsSuppored_GL_ARB_copy_buffer:Boolean {= False};
	SGIsSuppored_GL_ARB_uniform_buffer_object:Boolean {= False};
	SGIsSuppored_GL_ARB_draw_elements_base_vertex:Boolean {= False};
	SGIsSuppored_GL_ARB_provoking_vertex:Boolean {= False};
	SGIsSuppored_GL_ARB_sync:Boolean {= False};
	SGIsSuppored_GL_ARB_texture_multisample:Boolean {= False};
	SGIsSuppored_GL_ARB_blend_func_extended:Boolean {= False};
	SGIsSuppored_GL_ARB_sampler_objects:Boolean {= False};
	SGIsSuppored_GL_ARB_timer_query:Boolean {= False};
	SGIsSuppored_GL_ARB_vertex_type_2_10_10_10_rev:Boolean {= False};
	SGIsSuppored_GL_ARB_gpu_shader_fp64:Boolean {= False};
	SGIsSuppored_GL_ARB_shader_subroutine:Boolean {= False};
	SGIsSuppored_GL_ARB_tessellation_shader:Boolean {= False};
	SGIsSuppored_GL_ARB_transform_feedback2:Boolean {= False};
	SGIsSuppored_GL_ARB_transform_feedback3:Boolean {= False};
	SGIsSuppored_GL_version_1_4:Boolean {= False};
	SGIsSuppored_GL_version_1_5:Boolean {= False};
	SGIsSuppored_GL_version_2_0:Boolean {= False};
	SGIsSuppored_GL_VERSION_2_1:Boolean {= False};
	SGIsSuppored_GL_VERSION_3_0:Boolean {= False};
	SGIsSuppored_GL_VERSION_3_1:Boolean {= False};
	SGIsSuppored_GL_VERSION_3_2:Boolean {= False};
	SGIsSuppored_GL_VERSION_3_3:Boolean {= False};
	SGIsSuppored_GL_VERSION_4_0:Boolean {= False};
{$ENDIF}

{$IFDEF SG_RENDER_EP}
procedure TSGRenderOpenGL.LoadExtendeds;
var
	Extendeds:packed array of string;
	i,ii:LongWord;
begin
SetLength(Extendeds,0);
i:=0;

SGLog.Sourse('SGOpenGLInit : Supported is next extendeds {');

SGIsSuppored_GL_version_1_2:=Load_GL_version_1_2;
if SGIsSuppored_GL_version_1_2 then
	begin
	SGLog.Sourse('GL_version_1_2');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_version_1_2';
	end;
SGIsSuppored_GL_version_1_3:=Load_GL_version_1_3;
if SGIsSuppored_GL_version_1_3 then
	begin
	SGLog.Sourse('GL_version_1_3');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_version_1_3';
	end;
SGIsSuppored_GL_ARB_imaging:=Load_GL_ARB_imaging;
if SGIsSuppored_GL_ARB_imaging then
	begin
	SGLog.Sourse('GL_ARB_imaging');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_imaging';
	end;
SGIsSuppored_GL_ARB_multitexture:=Load_GL_ARB_multitexture;
if SGIsSuppored_GL_ARB_multitexture then
	begin
	SGLog.Sourse('GL_ARB_multitexture');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_multitexture';
	end;
SGIsSuppored_GL_ARB_transpose_matrix:=Load_GL_ARB_transpose_matrix;
if SGIsSuppored_GL_ARB_transpose_matrix then
	begin
	SGLog.Sourse('GL_ARB_transpose_matrix');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_transpose_matrix';
	end;
SGIsSuppored_GL_ARB_multisample:=Load_GL_ARB_multisample;
if SGIsSuppored_GL_ARB_multisample then
	begin
	SGLog.Sourse('GL_ARB_multisample');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_multisample';
	end;
SGIsSuppored_GL_ARB_texture_env_add:=Load_GL_ARB_texture_env_add;
if SGIsSuppored_GL_ARB_texture_env_add then
	begin
	SGLog.Sourse('GL_ARB_texture_env_add');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_env_add';
	end;
SGIsSuppored_WGL_ARB_extensions_string:=Load_WGL_ARB_extensions_string;
if SGIsSuppored_WGL_ARB_extensions_string then
	begin
	SGLog.Sourse('WGL_ARB_extensions_string');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_ARB_extensions_string';
	end;
SGIsSuppored_WGL_ARB_buffer_region:=Load_WGL_ARB_buffer_region;
if SGIsSuppored_WGL_ARB_buffer_region then
	begin
	SGLog.Sourse('WGL_ARB_buffer_region');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_ARB_buffer_region';
	end;
SGIsSuppored_GL_ARB_texture_cube_map:=Load_GL_ARB_texture_cube_map;
if SGIsSuppored_GL_ARB_texture_cube_map then
	begin
	SGLog.Sourse('GL_ARB_texture_cube_map');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_cube_map';
	end;
SGIsSuppored_GL_ARB_depth_texture:=Load_GL_ARB_depth_texture;
if SGIsSuppored_GL_ARB_depth_texture then
	begin
	SGLog.Sourse('GL_ARB_depth_texture');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_depth_texture';
	end;
SGIsSuppored_GL_ARB_point_parameters:=Load_GL_ARB_point_parameters;
if SGIsSuppored_GL_ARB_point_parameters then
	begin
	SGLog.Sourse('GL_ARB_point_parameters');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_point_parameters';
	end;
SGIsSuppored_GL_ARB_shadow:=Load_GL_ARB_shadow;
if SGIsSuppored_GL_ARB_shadow then
	begin
	SGLog.Sourse('GL_ARB_shadow');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_shadow';
	end;
SGIsSuppored_GL_ARB_shadow_ambient:=Load_GL_ARB_shadow_ambient;
if SGIsSuppored_GL_ARB_shadow_ambient then
	begin
	SGLog.Sourse('GL_ARB_shadow_ambient');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_shadow_ambient';
	end;
SGIsSuppored_GL_ARB_texture_border_clamp:=Load_GL_ARB_texture_border_clamp;
if SGIsSuppored_GL_ARB_texture_border_clamp then
	begin
	SGLog.Sourse('GL_ARB_texture_border_clamp');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_border_clamp';
	end;
SGIsSuppored_GL_ARB_texture_compression:=Load_GL_ARB_texture_compression;
if SGIsSuppored_GL_ARB_texture_compression then
	begin
	SGLog.Sourse('GL_ARB_texture_compression');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_compression';
	end;
SGIsSuppored_GL_ARB_texture_env_combine:=Load_GL_ARB_texture_env_combine;
if SGIsSuppored_GL_ARB_texture_env_combine then
	begin
	SGLog.Sourse('GL_ARB_texture_env_combine');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_env_combine';
	end;
SGIsSuppored_GL_ARB_texture_env_crossbar:=Load_GL_ARB_texture_env_crossbar;
if SGIsSuppored_GL_ARB_texture_env_crossbar then
	begin
	SGLog.Sourse('GL_ARB_texture_env_crossbar');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_env_crossbar';
	end;
SGIsSuppored_GL_ARB_texture_env_dot3:=Load_GL_ARB_texture_env_dot3;
if SGIsSuppored_GL_ARB_texture_env_dot3 then
	begin
	SGLog.Sourse('GL_ARB_texture_env_dot3');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_env_dot3';
	end;
SGIsSuppored_GL_ARB_texture_mirrored_repeat:=Load_GL_ARB_texture_mirrored_repeat;
if SGIsSuppored_GL_ARB_texture_mirrored_repeat then
	begin
	SGLog.Sourse('GL_ARB_texture_mirrored_repeat');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_mirrored_repeat';
	end;
SGIsSuppored_GL_ARB_vertex_blend:=Load_GL_ARB_vertex_blend;
if SGIsSuppored_GL_ARB_vertex_blend then
	begin
	SGLog.Sourse('GL_ARB_vertex_blend');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_vertex_blend';
	end;
SGIsSuppored_GL_ARB_vertex_program:=Load_GL_ARB_vertex_program;
if SGIsSuppored_GL_ARB_vertex_program then
	begin
	SGLog.Sourse('GL_ARB_vertex_program');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_vertex_program';
	end;
SGIsSuppored_GL_ARB_window_pos:=Load_GL_ARB_window_pos;
if SGIsSuppored_GL_ARB_window_pos then
	begin
	SGLog.Sourse('GL_ARB_window_pos');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_window_pos';
	end;
SGIsSuppored_GL_EXT_422_pixels:=Load_GL_EXT_422_pixels;
if SGIsSuppored_GL_EXT_422_pixels then
	begin
	SGLog.Sourse('GL_EXT_422_pixels');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_422_pixels';
	end;
SGIsSuppored_GL_EXT_bgra:=Load_GL_EXT_bgra;
if SGIsSuppored_GL_EXT_bgra then
	begin
	SGLog.Sourse('GL_EXT_bgra');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_bgra';
	end;
SGIsSuppored_GL_EXT_blend_color:=Load_GL_EXT_blend_color;
if SGIsSuppored_GL_EXT_blend_color then
	begin
	SGLog.Sourse('GL_EXT_blend_color');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_blend_color';
	end;
SGIsSuppored_GL_EXT_blend_func_separate:=Load_GL_EXT_blend_func_separate;
if SGIsSuppored_GL_EXT_blend_func_separate then
	begin
	SGLog.Sourse('GL_EXT_blend_func_separate');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_blend_func_separate';
	end;
SGIsSuppored_GL_EXT_blend_logic_op:=Load_GL_EXT_blend_logic_op;
if SGIsSuppored_GL_EXT_blend_logic_op then
	begin
	SGLog.Sourse('GL_EXT_blend_logic_op');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_blend_logic_op';
	end;
SGIsSuppored_GL_EXT_blend_minmax:=Load_GL_EXT_blend_minmax;
if SGIsSuppored_GL_EXT_blend_minmax then
	begin
	SGLog.Sourse('GL_EXT_blend_minmax');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_blend_minmax';
	end;
SGIsSuppored_GL_EXT_blend_subtract:=Load_GL_EXT_blend_subtract;
if SGIsSuppored_GL_EXT_blend_subtract then
	begin
	SGLog.Sourse('GL_EXT_blend_subtract');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_blend_subtract';
	end;
SGIsSuppored_GL_EXT_clip_volume_hint:=Load_GL_EXT_clip_volume_hint;
if SGIsSuppored_GL_EXT_clip_volume_hint then
	begin
	SGLog.Sourse('GL_EXT_clip_volume_hint');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_clip_volume_hint';
	end;
SGIsSuppored_GL_EXT_color_subtable:=Load_GL_EXT_color_subtable;
if SGIsSuppored_GL_EXT_color_subtable then
	begin
	SGLog.Sourse('GL_EXT_color_subtable');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_color_subtable';
	end;
SGIsSuppored_GL_EXT_compiled_vertex_array:=Load_GL_EXT_compiled_vertex_array;
if SGIsSuppored_GL_EXT_compiled_vertex_array then
	begin
	SGLog.Sourse('GL_EXT_compiled_vertex_array');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_compiled_vertex_array';
	end;
SGIsSuppored_GL_EXT_convolution:=Load_GL_EXT_convolution;
if SGIsSuppored_GL_EXT_convolution then
	begin
	SGLog.Sourse('GL_EXT_convolution');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_convolution';
	end;
SGIsSuppored_GL_EXT_fog_coord:=Load_GL_EXT_fog_coord;
if SGIsSuppored_GL_EXT_fog_coord then
	begin
	SGLog.Sourse('GL_EXT_fog_coord');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_fog_coord';
	end;
SGIsSuppored_GL_EXT_histogram:=Load_GL_EXT_histogram;
if SGIsSuppored_GL_EXT_histogram then
	begin
	SGLog.Sourse('GL_EXT_histogram');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_histogram';
	end;
SGIsSuppored_GL_EXT_multi_draw_arrays:=Load_GL_EXT_multi_draw_arrays;
if SGIsSuppored_GL_EXT_multi_draw_arrays then
	begin
	SGLog.Sourse('GL_EXT_multi_draw_arrays');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_multi_draw_arrays';
	end;
SGIsSuppored_GL_EXT_packed_depth_stencil:=Load_GL_EXT_packed_depth_stencil;
if SGIsSuppored_GL_EXT_packed_depth_stencil then
	begin
	SGLog.Sourse('GL_EXT_packed_depth_stencil');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_packed_depth_stencil';
	end;
SGIsSuppored_GL_EXT_packed_pixels:=Load_GL_EXT_packed_pixels;
if SGIsSuppored_GL_EXT_packed_pixels then
	begin
	SGLog.Sourse('GL_EXT_packed_pixels');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_packed_pixels';
	end;
SGIsSuppored_GL_EXT_paletted_texture:=Load_GL_EXT_paletted_texture;
if SGIsSuppored_GL_EXT_paletted_texture then
	begin
	SGLog.Sourse('GL_EXT_paletted_texture');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_paletted_texture';
	end;
SGIsSuppored_GL_EXT_point_parameters:=Load_GL_EXT_point_parameters;
if SGIsSuppored_GL_EXT_point_parameters then
	begin
	SGLog.Sourse('GL_EXT_point_parameters');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_point_parameters';
	end;
SGIsSuppored_GL_EXT_polygon_offset:=Load_GL_EXT_polygon_offset;
if SGIsSuppored_GL_EXT_polygon_offset then
	begin
	SGLog.Sourse('GL_EXT_polygon_offset');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_polygon_offset';
	end;
SGIsSuppored_GL_EXT_secondary_color:=Load_GL_EXT_secondary_color;
if SGIsSuppored_GL_EXT_secondary_color then
	begin
	SGLog.Sourse('GL_EXT_secondary_color');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_secondary_color';
	end;
SGIsSuppored_GL_EXT_separate_specular_color:=Load_GL_EXT_separate_specular_color;
if SGIsSuppored_GL_EXT_separate_specular_color then
	begin
	SGLog.Sourse('GL_EXT_separate_specular_color');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_separate_specular_color';
	end;
SGIsSuppored_GL_EXT_shadow_funcs:=Load_GL_EXT_shadow_funcs;
if SGIsSuppored_GL_EXT_shadow_funcs then
	begin
	SGLog.Sourse('GL_EXT_shadow_funcs');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_shadow_funcs';
	end;
SGIsSuppored_GL_EXT_shared_texture_palette:=Load_GL_EXT_shared_texture_palette;
if SGIsSuppored_GL_EXT_shared_texture_palette then
	begin
	SGLog.Sourse('GL_EXT_shared_texture_palette');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_shared_texture_palette';
	end;
SGIsSuppored_GL_EXT_stencil_two_side:=Load_GL_EXT_stencil_two_side;
if SGIsSuppored_GL_EXT_stencil_two_side then
	begin
	SGLog.Sourse('GL_EXT_stencil_two_side');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_stencil_two_side';
	end;
SGIsSuppored_GL_EXT_stencil_wrap:=Load_GL_EXT_stencil_wrap;
if SGIsSuppored_GL_EXT_stencil_wrap then
	begin
	SGLog.Sourse('GL_EXT_stencil_wrap');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_stencil_wrap';
	end;
SGIsSuppored_GL_EXT_subtexture:=Load_GL_EXT_subtexture;
if SGIsSuppored_GL_EXT_subtexture then
	begin
	SGLog.Sourse('GL_EXT_subtexture');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_subtexture';
	end;
SGIsSuppored_GL_EXT_texture3D:=Load_GL_EXT_texture3D;
if SGIsSuppored_GL_EXT_texture3D then
	begin
	SGLog.Sourse('GL_EXT_texture3D');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_texture3D';
	end;
SGIsSuppored_GL_EXT_texture_compression_s3tc:=Load_GL_EXT_texture_compression_s3tc;
if SGIsSuppored_GL_EXT_texture_compression_s3tc then
	begin
	SGLog.Sourse('GL_EXT_texture_compression_s3tc');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_texture_compression_s3tc';
	end;
SGIsSuppored_GL_EXT_texture_env_add:=Load_GL_EXT_texture_env_add;
if SGIsSuppored_GL_EXT_texture_env_add then
	begin
	SGLog.Sourse('GL_EXT_texture_env_add');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_texture_env_add';
	end;
SGIsSuppored_GL_EXT_texture_env_combine:=Load_GL_EXT_texture_env_combine;
if SGIsSuppored_GL_EXT_texture_env_combine then
	begin
	SGLog.Sourse('GL_EXT_texture_env_combine');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_texture_env_combine';
	end;
SGIsSuppored_GL_EXT_texture_env_dot3:=Load_GL_EXT_texture_env_dot3;
if SGIsSuppored_GL_EXT_texture_env_dot3 then
	begin
	SGLog.Sourse('GL_EXT_texture_env_dot3');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_texture_env_dot3';
	end;
SGIsSuppored_GL_EXT_texture_filter_anisotropic:=Load_GL_EXT_texture_filter_anisotropic;
if SGIsSuppored_GL_EXT_texture_filter_anisotropic then
	begin
	SGLog.Sourse('GL_EXT_texture_filter_anisotropic');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_texture_filter_anisotropic';
	end;
SGIsSuppored_GL_EXT_texture_lod_bias:=Load_GL_EXT_texture_lod_bias;
if SGIsSuppored_GL_EXT_texture_lod_bias then
	begin
	SGLog.Sourse('GL_EXT_texture_lod_bias');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_texture_lod_bias';
	end;
SGIsSuppored_GL_EXT_texture_object:=Load_GL_EXT_texture_object;
if SGIsSuppored_GL_EXT_texture_object then
	begin
	SGLog.Sourse('GL_EXT_texture_object');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_texture_object';
	end;
SGIsSuppored_GL_EXT_vertex_array:=Load_GL_EXT_vertex_array;
if SGIsSuppored_GL_EXT_vertex_array then
	begin
	SGLog.Sourse('GL_EXT_vertex_array');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_vertex_array';
	end;
SGIsSuppored_GL_EXT_vertex_shader:=Load_GL_EXT_vertex_shader;
if SGIsSuppored_GL_EXT_vertex_shader then
	begin
	SGLog.Sourse('GL_EXT_vertex_shader');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_vertex_shader';
	end;
SGIsSuppored_GL_EXT_vertex_weighting:=Load_GL_EXT_vertex_weighting;
if SGIsSuppored_GL_EXT_vertex_weighting then
	begin
	SGLog.Sourse('GL_EXT_vertex_weighting');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_vertex_weighting';
	end;
SGIsSuppored_GL_HP_occlusion_test:=Load_GL_HP_occlusion_test;
if SGIsSuppored_GL_HP_occlusion_test then
	begin
	SGLog.Sourse('GL_HP_occlusion_test');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_HP_occlusion_test';
	end;
SGIsSuppored_GL_NV_blend_square:=Load_GL_NV_blend_square;
if SGIsSuppored_GL_NV_blend_square then
	begin
	SGLog.Sourse('GL_NV_blend_square');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_blend_square';
	end;
SGIsSuppored_GL_NV_copy_depth_to_color:=Load_GL_NV_copy_depth_to_color;
if SGIsSuppored_GL_NV_copy_depth_to_color then
	begin
	SGLog.Sourse('GL_NV_copy_depth_to_color');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_copy_depth_to_color';
	end;
SGIsSuppored_GL_NV_depth_clamp:=Load_GL_NV_depth_clamp;
if SGIsSuppored_GL_NV_depth_clamp then
	begin
	SGLog.Sourse('GL_NV_depth_clamp');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_depth_clamp';
	end;
SGIsSuppored_GL_NV_evaluators:=Load_GL_NV_evaluators;
if SGIsSuppored_GL_NV_evaluators then
	begin
	SGLog.Sourse('GL_NV_evaluators');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_evaluators';
	end;
SGIsSuppored_GL_NV_fence:=Load_GL_NV_fence;
if SGIsSuppored_GL_NV_fence then
	begin
	SGLog.Sourse('GL_NV_fence');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_fence';
	end;
SGIsSuppored_GL_NV_fog_distance:=Load_GL_NV_fog_distance;
if SGIsSuppored_GL_NV_fog_distance then
	begin
	SGLog.Sourse('GL_NV_fog_distance');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_fog_distance';
	end;
SGIsSuppored_GL_NV_light_max_exponent:=Load_GL_NV_light_max_exponent;
if SGIsSuppored_GL_NV_light_max_exponent then
	begin
	SGLog.Sourse('GL_NV_light_max_exponent');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_light_max_exponent';
	end;
SGIsSuppored_GL_NV_multisample_filter_hint:=Load_GL_NV_multisample_filter_hint;
if SGIsSuppored_GL_NV_multisample_filter_hint then
	begin
	SGLog.Sourse('GL_NV_multisample_filter_hint');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_multisample_filter_hint';
	end;
SGIsSuppored_GL_NV_occlusion_query:=Load_GL_NV_occlusion_query;
if SGIsSuppored_GL_NV_occlusion_query then
	begin
	SGLog.Sourse('GL_NV_occlusion_query');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_occlusion_query';
	end;
SGIsSuppored_GL_NV_packed_depth_stencil:=Load_GL_NV_packed_depth_stencil;
if SGIsSuppored_GL_NV_packed_depth_stencil then
	begin
	SGLog.Sourse('GL_NV_packed_depth_stencil');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_packed_depth_stencil';
	end;
SGIsSuppored_GL_NV_point_sprite:=Load_GL_NV_point_sprite;
if SGIsSuppored_GL_NV_point_sprite then
	begin
	SGLog.Sourse('GL_NV_point_sprite');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_point_sprite';
	end;
SGIsSuppored_GL_NV_register_combiners:=Load_GL_NV_register_combiners;
if SGIsSuppored_GL_NV_register_combiners then
	begin
	SGLog.Sourse('GL_NV_register_combiners');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_register_combiners';
	end;
SGIsSuppored_GL_NV_register_combiners2:=Load_GL_NV_register_combiners2;
if SGIsSuppored_GL_NV_register_combiners2 then
	begin
	SGLog.Sourse('GL_NV_register_combiners2');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_register_combiners2';
	end;
SGIsSuppored_GL_NV_texgen_emboss:=Load_GL_NV_texgen_emboss;
if SGIsSuppored_GL_NV_texgen_emboss then
	begin
	SGLog.Sourse('GL_NV_texgen_emboss');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_texgen_emboss';
	end;
SGIsSuppored_GL_NV_texgen_reflection:=Load_GL_NV_texgen_reflection;
if SGIsSuppored_GL_NV_texgen_reflection then
	begin
	SGLog.Sourse('GL_NV_texgen_reflection');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_texgen_reflection';
	end;
SGIsSuppored_GL_NV_texture_compression_vtc:=Load_GL_NV_texture_compression_vtc;
if SGIsSuppored_GL_NV_texture_compression_vtc then
	begin
	SGLog.Sourse('GL_NV_texture_compression_vtc');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_texture_compression_vtc';
	end;
SGIsSuppored_GL_NV_texture_env_combine4:=Load_GL_NV_texture_env_combine4;
if SGIsSuppored_GL_NV_texture_env_combine4 then
	begin
	SGLog.Sourse('GL_NV_texture_env_combine4');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_texture_env_combine4';
	end;
SGIsSuppored_GL_NV_texture_rectangle:=Load_GL_NV_texture_rectangle;
if SGIsSuppored_GL_NV_texture_rectangle then
	begin
	SGLog.Sourse('GL_NV_texture_rectangle');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_texture_rectangle';
	end;
SGIsSuppored_GL_NV_texture_shader:=Load_GL_NV_texture_shader;
if SGIsSuppored_GL_NV_texture_shader then
	begin
	SGLog.Sourse('GL_NV_texture_shader');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_texture_shader';
	end;
SGIsSuppored_GL_NV_texture_shader2:=Load_GL_NV_texture_shader2;
if SGIsSuppored_GL_NV_texture_shader2 then
	begin
	SGLog.Sourse('GL_NV_texture_shader2');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_texture_shader2';
	end;
SGIsSuppored_GL_NV_texture_shader3:=Load_GL_NV_texture_shader3;
if SGIsSuppored_GL_NV_texture_shader3 then
	begin
	SGLog.Sourse('GL_NV_texture_shader3');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_texture_shader3';
	end;
SGIsSuppored_GL_NV_vertex_array_range:=Load_GL_NV_vertex_array_range;
if SGIsSuppored_GL_NV_vertex_array_range then
	begin
	SGLog.Sourse('GL_NV_vertex_array_range');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_vertex_array_range';
	end;
SGIsSuppored_GL_NV_vertex_array_range2:=Load_GL_NV_vertex_array_range2;
if SGIsSuppored_GL_NV_vertex_array_range2 then
	begin
	SGLog.Sourse('GL_NV_vertex_array_range2');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_vertex_array_range2';
	end;
SGIsSuppored_GL_NV_vertex_program:=Load_GL_NV_vertex_program;
if SGIsSuppored_GL_NV_vertex_program then
	begin
	SGLog.Sourse('GL_NV_vertex_program');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_vertex_program';
	end;
SGIsSuppored_GL_NV_vertex_program1_1:=Load_GL_NV_vertex_program1_1;
if SGIsSuppored_GL_NV_vertex_program1_1 then
	begin
	SGLog.Sourse('GL_NV_vertex_program1_1');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_vertex_program1_1';
	end;
SGIsSuppored_GL_ATI_element_array:=Load_GL_ATI_element_array;
if SGIsSuppored_GL_ATI_element_array then
	begin
	SGLog.Sourse('GL_ATI_element_array');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_element_array';
	end;
SGIsSuppored_GL_ATI_envmap_bumpmap:=Load_GL_ATI_envmap_bumpmap;
if SGIsSuppored_GL_ATI_envmap_bumpmap then
	begin
	SGLog.Sourse('GL_ATI_envmap_bumpmap');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_envmap_bumpmap';
	end;
SGIsSuppored_GL_ATI_fragment_shader:=Load_GL_ATI_fragment_shader;
if SGIsSuppored_GL_ATI_fragment_shader then
	begin
	SGLog.Sourse('GL_ATI_fragment_shader');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_fragment_shader';
	end;
SGIsSuppored_GL_ATI_pn_triangles:=Load_GL_ATI_pn_triangles;
if SGIsSuppored_GL_ATI_pn_triangles then
	begin
	SGLog.Sourse('GL_ATI_pn_triangles');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_pn_triangles';
	end;
SGIsSuppored_GL_ATI_texture_mirror_once:=Load_GL_ATI_texture_mirror_once;
if SGIsSuppored_GL_ATI_texture_mirror_once then
	begin
	SGLog.Sourse('GL_ATI_texture_mirror_once');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_texture_mirror_once';
	end;
SGIsSuppored_GL_ATI_vertex_array_object:=Load_GL_ATI_vertex_array_object;
if SGIsSuppored_GL_ATI_vertex_array_object then
	begin
	SGLog.Sourse('GL_ATI_vertex_array_object');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_vertex_array_object';
	end;
SGIsSuppored_GL_ATI_vertex_streams:=Load_GL_ATI_vertex_streams;
if SGIsSuppored_GL_ATI_vertex_streams then
	begin
	SGLog.Sourse('GL_ATI_vertex_streams');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_vertex_streams';
	end;
SGIsSuppored_WGL_I3D_image_buffer:=Load_WGL_I3D_image_buffer;
if SGIsSuppored_WGL_I3D_image_buffer then
	begin
	SGLog.Sourse('WGL_I3D_image_buffer');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_I3D_image_buffer';
	end;
SGIsSuppored_WGL_I3D_swap_frame_lock:=Load_WGL_I3D_swap_frame_lock;
if SGIsSuppored_WGL_I3D_swap_frame_lock then
	begin
	SGLog.Sourse('WGL_I3D_swap_frame_lock');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_I3D_swap_frame_lock';
	end;
SGIsSuppored_WGL_I3D_swap_frame_usage:=Load_WGL_I3D_swap_frame_usage;
if SGIsSuppored_WGL_I3D_swap_frame_usage then
	begin
	SGLog.Sourse('WGL_I3D_swap_frame_usage');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_I3D_swap_frame_usage';
	end;
SGIsSuppored_GL_3DFX_texture_compression_FXT1:=Load_GL_3DFX_texture_compression_FXT1;
if SGIsSuppored_GL_3DFX_texture_compression_FXT1 then
	begin
	SGLog.Sourse('GL_3DFX_texture_compression_FXT1');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_3DFX_texture_compression_FXT1';
	end;
SGIsSuppored_GL_IBM_cull_vertex:=Load_GL_IBM_cull_vertex;
if SGIsSuppored_GL_IBM_cull_vertex then
	begin
	SGLog.Sourse('GL_IBM_cull_vertex');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_IBM_cull_vertex';
	end;
SGIsSuppored_GL_IBM_multimode_draw_arrays:=Load_GL_IBM_multimode_draw_arrays;
if SGIsSuppored_GL_IBM_multimode_draw_arrays then
	begin
	SGLog.Sourse('GL_IBM_multimode_draw_arrays');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_IBM_multimode_draw_arrays';
	end;
SGIsSuppored_GL_IBM_raster_pos_clip:=Load_GL_IBM_raster_pos_clip;
if SGIsSuppored_GL_IBM_raster_pos_clip then
	begin
	SGLog.Sourse('GL_IBM_raster_pos_clip');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_IBM_raster_pos_clip';
	end;
SGIsSuppored_GL_IBM_texture_mirrored_repeat:=Load_GL_IBM_texture_mirrored_repeat;
if SGIsSuppored_GL_IBM_texture_mirrored_repeat then
	begin
	SGLog.Sourse('GL_IBM_texture_mirrored_repeat');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_IBM_texture_mirrored_repeat';
	end;
SGIsSuppored_GL_IBM_vertex_array_lists:=Load_GL_IBM_vertex_array_lists;
if SGIsSuppored_GL_IBM_vertex_array_lists then
	begin
	SGLog.Sourse('GL_IBM_vertex_array_lists');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_IBM_vertex_array_lists';
	end;
SGIsSuppored_GL_MESA_resize_buffers:=Load_GL_MESA_resize_buffers;
if SGIsSuppored_GL_MESA_resize_buffers then
	begin
	SGLog.Sourse('GL_MESA_resize_buffers');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_MESA_resize_buffers';
	end;
SGIsSuppored_GL_MESA_window_pos:=Load_GL_MESA_window_pos;
if SGIsSuppored_GL_MESA_window_pos then
	begin
	SGLog.Sourse('GL_MESA_window_pos');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_MESA_window_pos';
	end;
SGIsSuppored_GL_OML_interlace:=Load_GL_OML_interlace;
if SGIsSuppored_GL_OML_interlace then
	begin
	SGLog.Sourse('GL_OML_interlace');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_OML_interlace';
	end;
SGIsSuppored_GL_OML_resample:=Load_GL_OML_resample;
if SGIsSuppored_GL_OML_resample then
	begin
	SGLog.Sourse('GL_OML_resample');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_OML_resample';
	end;
SGIsSuppored_GL_OML_subsample:=Load_GL_OML_subsample;
if SGIsSuppored_GL_OML_subsample then
	begin
	SGLog.Sourse('GL_OML_subsample');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_OML_subsample';
	end;
SGIsSuppored_GL_SGIS_generate_mipmap:=Load_GL_SGIS_generate_mipmap;
if SGIsSuppored_GL_SGIS_generate_mipmap then
	begin
	SGLog.Sourse('GL_SGIS_generate_mipmap');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGIS_generate_mipmap';
	end;
SGIsSuppored_GL_SGIS_multisample:=Load_GL_SGIS_multisample;
if SGIsSuppored_GL_SGIS_multisample then
	begin
	SGLog.Sourse('GL_SGIS_multisample');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGIS_multisample';
	end;
SGIsSuppored_GL_SGIS_pixel_texture:=Load_GL_SGIS_pixel_texture;
if SGIsSuppored_GL_SGIS_pixel_texture then
	begin
	SGLog.Sourse('GL_SGIS_pixel_texture');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGIS_pixel_texture';
	end;
SGIsSuppored_GL_SGIS_texture_border_clamp:=Load_GL_SGIS_texture_border_clamp;
if SGIsSuppored_GL_SGIS_texture_border_clamp then
	begin
	SGLog.Sourse('GL_SGIS_texture_border_clamp');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGIS_texture_border_clamp';
	end;
SGIsSuppored_GL_SGIS_texture_color_mask:=Load_GL_SGIS_texture_color_mask;
if SGIsSuppored_GL_SGIS_texture_color_mask then
	begin
	SGLog.Sourse('GL_SGIS_texture_color_mask');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGIS_texture_color_mask';
	end;
SGIsSuppored_GL_SGIS_texture_edge_clamp:=Load_GL_SGIS_texture_edge_clamp;
if SGIsSuppored_GL_SGIS_texture_edge_clamp then
	begin
	SGLog.Sourse('GL_SGIS_texture_edge_clamp');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGIS_texture_edge_clamp';
	end;
SGIsSuppored_GL_SGIS_texture_lod:=Load_GL_SGIS_texture_lod;
if SGIsSuppored_GL_SGIS_texture_lod then
	begin
	SGLog.Sourse('GL_SGIS_texture_lod');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGIS_texture_lod';
	end;
SGIsSuppored_GL_SGIS_depth_texture:=Load_GL_SGIS_depth_texture;
if SGIsSuppored_GL_SGIS_depth_texture then
	begin
	SGLog.Sourse('GL_SGIS_depth_texture');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGIS_depth_texture';
	end;
SGIsSuppored_GL_SGIX_fog_offset:=Load_GL_SGIX_fog_offset;
if SGIsSuppored_GL_SGIX_fog_offset then
	begin
	SGLog.Sourse('GL_SGIX_fog_offset');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGIX_fog_offset';
	end;
SGIsSuppored_GL_SGIX_interlace:=Load_GL_SGIX_interlace;
if SGIsSuppored_GL_SGIX_interlace then
	begin
	SGLog.Sourse('GL_SGIX_interlace');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGIX_interlace';
	end;
SGIsSuppored_GL_SGIX_shadow_ambient:=Load_GL_SGIX_shadow_ambient;
if SGIsSuppored_GL_SGIX_shadow_ambient then
	begin
	SGLog.Sourse('GL_SGIX_shadow_ambient');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGIX_shadow_ambient';
	end;
SGIsSuppored_GL_SGI_color_matrix:=Load_GL_SGI_color_matrix;
if SGIsSuppored_GL_SGI_color_matrix then
	begin
	SGLog.Sourse('GL_SGI_color_matrix');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGI_color_matrix';
	end;
SGIsSuppored_GL_SGI_color_table:=Load_GL_SGI_color_table;
if SGIsSuppored_GL_SGI_color_table then
	begin
	SGLog.Sourse('GL_SGI_color_table');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGI_color_table';
	end;
SGIsSuppored_GL_SGI_texture_color_table:=Load_GL_SGI_texture_color_table;
if SGIsSuppored_GL_SGI_texture_color_table then
	begin
	SGLog.Sourse('GL_SGI_texture_color_table');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SGI_texture_color_table';
	end;
SGIsSuppored_GL_SUN_vertex:=Load_GL_SUN_vertex;
if SGIsSuppored_GL_SUN_vertex then
	begin
	SGLog.Sourse('GL_SUN_vertex');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_SUN_vertex';
	end;
SGIsSuppored_GL_ARB_fragment_program:=Load_GL_ARB_fragment_program;
if SGIsSuppored_GL_ARB_fragment_program then
	begin
	SGLog.Sourse('GL_ARB_fragment_program');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_fragment_program';
	end;
SGIsSuppored_GL_ATI_text_fragment_shader:=Load_GL_ATI_text_fragment_shader;
if SGIsSuppored_GL_ATI_text_fragment_shader then
	begin
	SGLog.Sourse('GL_ATI_text_fragment_shader');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_text_fragment_shader';
	end;
SGIsSuppored_GL_ARB_vertex_buffer_object:=Load_GL_ARB_vertex_buffer_object;
if SGIsSuppored_GL_ARB_vertex_buffer_object then
	begin
	SGLog.Sourse('GL_ARB_vertex_buffer_object');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_vertex_buffer_object';
	end;
SGIsSuppored_GL_APPLE_client_storage:=Load_GL_APPLE_client_storage;
if SGIsSuppored_GL_APPLE_client_storage then
	begin
	SGLog.Sourse('GL_APPLE_client_storage');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_APPLE_client_storage';
	end;
SGIsSuppored_GL_APPLE_element_array:=Load_GL_APPLE_element_array;
if SGIsSuppored_GL_APPLE_element_array then
	begin
	SGLog.Sourse('GL_APPLE_element_array');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_APPLE_element_array';
	end;
SGIsSuppored_GL_APPLE_fence:=Load_GL_APPLE_fence;
if SGIsSuppored_GL_APPLE_fence then
	begin
	SGLog.Sourse('GL_APPLE_fence');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_APPLE_fence';
	end;
SGIsSuppored_GL_APPLE_vertex_array_object:=Load_GL_APPLE_vertex_array_object;
if SGIsSuppored_GL_APPLE_vertex_array_object then
	begin
	SGLog.Sourse('GL_APPLE_vertex_array_object');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_APPLE_vertex_array_object';
	end;
SGIsSuppored_GL_APPLE_vertex_array_range:=Load_GL_APPLE_vertex_array_range;
if SGIsSuppored_GL_APPLE_vertex_array_range then
	begin
	SGLog.Sourse('GL_APPLE_vertex_array_range');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_APPLE_vertex_array_range';
	end;
SGIsSuppored_WGL_ARB_pixel_format:=Load_WGL_ARB_pixel_format;
if SGIsSuppored_WGL_ARB_pixel_format then
	begin
	SGLog.Sourse('WGL_ARB_pixel_format');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_ARB_pixel_format';
	end;
SGIsSuppored_WGL_ARB_make_current_read:=Load_WGL_ARB_make_current_read;
if SGIsSuppored_WGL_ARB_make_current_read then
	begin
	SGLog.Sourse('WGL_ARB_make_current_read');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_ARB_make_current_read';
	end;
SGIsSuppored_WGL_ARB_pbuffer:=Load_WGL_ARB_pbuffer;
if SGIsSuppored_WGL_ARB_pbuffer then
	begin
	SGLog.Sourse('WGL_ARB_pbuffer');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_ARB_pbuffer';
	end;
SGIsSuppored_WGL_EXT_swap_control:=Load_WGL_EXT_swap_control;
if SGIsSuppored_WGL_EXT_swap_control then
	begin
	SGLog.Sourse('WGL_EXT_swap_control');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_EXT_swap_control';
	end;
SGIsSuppored_WGL_ARB_render_texture:=Load_WGL_ARB_render_texture;
if SGIsSuppored_WGL_ARB_render_texture then
	begin
	SGLog.Sourse('WGL_ARB_render_texture');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_ARB_render_texture';
	end;
SGIsSuppored_WGL_EXT_extensions_string:=Load_WGL_EXT_extensions_string;
if SGIsSuppored_WGL_EXT_extensions_string then
	begin
	SGLog.Sourse('WGL_EXT_extensions_string');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_EXT_extensions_string';
	end;
SGIsSuppored_WGL_EXT_make_current_read:=Load_WGL_EXT_make_current_read;
if SGIsSuppored_WGL_EXT_make_current_read then
	begin
	SGLog.Sourse('WGL_EXT_make_current_read');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_EXT_make_current_read';
	end;
SGIsSuppored_WGL_EXT_pbuffer:=Load_WGL_EXT_pbuffer;
if SGIsSuppored_WGL_EXT_pbuffer then
	begin
	SGLog.Sourse('WGL_EXT_pbuffer');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_EXT_pbuffer';
	end;
SGIsSuppored_WGL_EXT_pixel_format:=Load_WGL_EXT_pixel_format;
if SGIsSuppored_WGL_EXT_pixel_format then
	begin
	SGLog.Sourse('WGL_EXT_pixel_format');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_EXT_pixel_format';
	end;
SGIsSuppored_WGL_I3D_digital_video_control:=Load_WGL_I3D_digital_video_control;
if SGIsSuppored_WGL_I3D_digital_video_control then
	begin
	SGLog.Sourse('WGL_I3D_digital_video_control');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_I3D_digital_video_control';
	end;
SGIsSuppored_WGL_I3D_gamma:=Load_WGL_I3D_gamma;
if SGIsSuppored_WGL_I3D_gamma then
	begin
	SGLog.Sourse('WGL_I3D_gamma');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_I3D_gamma';
	end;
SGIsSuppored_WGL_I3D_genlock:=Load_WGL_I3D_genlock;
if SGIsSuppored_WGL_I3D_genlock then
	begin
	SGLog.Sourse('WGL_I3D_genlock');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_I3D_genlock';
	end;
SGIsSuppored_GL_ARB_matrix_palette:=Load_GL_ARB_matrix_palette;
if SGIsSuppored_GL_ARB_matrix_palette then
	begin
	SGLog.Sourse('GL_ARB_matrix_palette');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_matrix_palette';
	end;
SGIsSuppored_GL_NV_element_array:=Load_GL_NV_element_array;
if SGIsSuppored_GL_NV_element_array then
	begin
	SGLog.Sourse('GL_NV_element_array');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_element_array';
	end;
SGIsSuppored_GL_NV_float_buffer:=Load_GL_NV_float_buffer;
if SGIsSuppored_GL_NV_float_buffer then
	begin
	SGLog.Sourse('GL_NV_float_buffer');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_float_buffer';
	end;
SGIsSuppored_GL_NV_fragment_program:=Load_GL_NV_fragment_program;
if SGIsSuppored_GL_NV_fragment_program then
	begin
	SGLog.Sourse('GL_NV_fragment_program');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_fragment_program';
	end;
SGIsSuppored_GL_NV_primitive_restart:=Load_GL_NV_primitive_restart;
if SGIsSuppored_GL_NV_primitive_restart then
	begin
	SGLog.Sourse('GL_NV_primitive_restart');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_primitive_restart';
	end;
SGIsSuppored_GL_NV_vertex_program2:=Load_GL_NV_vertex_program2;
if SGIsSuppored_GL_NV_vertex_program2 then
	begin
	SGLog.Sourse('GL_NV_vertex_program2');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_vertex_program2';
	end;
SGIsSuppored_WGL_NV_render_texture_rectangle:=Load_WGL_NV_render_texture_rectangle;
if SGIsSuppored_WGL_NV_render_texture_rectangle then
	begin
	SGLog.Sourse('WGL_NV_render_texture_rectangle');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_NV_render_texture_rectangle';
	end;
SGIsSuppored_GL_NV_pixel_data_range:=Load_GL_NV_pixel_data_range;
if SGIsSuppored_GL_NV_pixel_data_range then
	begin
	SGLog.Sourse('GL_NV_pixel_data_range');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_pixel_data_range';
	end;
SGIsSuppored_GL_EXT_texture_rectangle:=Load_GL_EXT_texture_rectangle;
if SGIsSuppored_GL_EXT_texture_rectangle then
	begin
	SGLog.Sourse('GL_EXT_texture_rectangle');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_texture_rectangle';
	end;
SGIsSuppored_GL_S3_s3tc:=Load_GL_S3_s3tc;
if SGIsSuppored_GL_S3_s3tc then
	begin
	SGLog.Sourse('GL_S3_s3tc');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_S3_s3tc';
	end;
SGIsSuppored_GL_ATI_draw_buffers:=Load_GL_ATI_draw_buffers;
if SGIsSuppored_GL_ATI_draw_buffers then
	begin
	SGLog.Sourse('GL_ATI_draw_buffers');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_draw_buffers';
	end;
SGIsSuppored_WGL_ATI_pixel_format_float:=Load_WGL_ATI_pixel_format_float;
if SGIsSuppored_WGL_ATI_pixel_format_float then
	begin
	SGLog.Sourse('WGL_ATI_pixel_format_float');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='WGL_ATI_pixel_format_float';
	end;
SGIsSuppored_GL_ATI_texture_env_combine3:=Load_GL_ATI_texture_env_combine3;
if SGIsSuppored_GL_ATI_texture_env_combine3 then
	begin
	SGLog.Sourse('GL_ATI_texture_env_combine3');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_texture_env_combine3';
	end;
SGIsSuppored_GL_ATI_texture_float:=Load_GL_ATI_texture_float;
if SGIsSuppored_GL_ATI_texture_float then
	begin
	SGLog.Sourse('GL_ATI_texture_float');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_texture_float';
	end;
SGIsSuppored_GL_NV_texture_expand_normal:=Load_GL_NV_texture_expand_normal;
if SGIsSuppored_GL_NV_texture_expand_normal then
	begin
	SGLog.Sourse('GL_NV_texture_expand_normal');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_texture_expand_normal';
	end;
SGIsSuppored_GL_NV_half_float:=Load_GL_NV_half_float;
if SGIsSuppored_GL_NV_half_float then
	begin
	SGLog.Sourse('GL_NV_half_float');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_half_float';
	end;
SGIsSuppored_GL_ATI_map_object_buffer:=Load_GL_ATI_map_object_buffer;
if SGIsSuppored_GL_ATI_map_object_buffer then
	begin
	SGLog.Sourse('GL_ATI_map_object_buffer');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_map_object_buffer';
	end;
SGIsSuppored_GL_ATI_separate_stencil:=Load_GL_ATI_separate_stencil;
if SGIsSuppored_GL_ATI_separate_stencil then
	begin
	SGLog.Sourse('GL_ATI_separate_stencil');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_separate_stencil';
	end;
SGIsSuppored_GL_ATI_vertex_attrib_array_object:=Load_GL_ATI_vertex_attrib_array_object;
if SGIsSuppored_GL_ATI_vertex_attrib_array_object then
	begin
	SGLog.Sourse('GL_ATI_vertex_attrib_array_object');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ATI_vertex_attrib_array_object';
	end;
SGIsSuppored_GL_ARB_occlusion_query:=Load_GL_ARB_occlusion_query;
if SGIsSuppored_GL_ARB_occlusion_query then
	begin
	SGLog.Sourse('GL_ARB_occlusion_query');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_occlusion_query';
	end;
SGIsSuppored_GL_ARB_shader_objects:=Load_GL_ARB_shader_objects;
if SGIsSuppored_GL_ARB_shader_objects then
	begin
	SGLog.Sourse('GL_ARB_shader_objects');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_shader_objects';
	end;
SGIsSuppored_GL_ARB_vertex_shader:=Load_GL_ARB_vertex_shader;
if SGIsSuppored_GL_ARB_vertex_shader then
	begin
	SGLog.Sourse('GL_ARB_vertex_shader');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_vertex_shader';
	end;
SGIsSuppored_GL_ARB_fragment_shader:=Load_GL_ARB_fragment_shader;
if SGIsSuppored_GL_ARB_fragment_shader then
	begin
	SGLog.Sourse('GL_ARB_fragment_shader');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_fragment_shader';
	end;
SGIsSuppored_GL_ARB_shading_language_100:=Load_GL_ARB_shading_language_100;
if SGIsSuppored_GL_ARB_shading_language_100 then
	begin
	SGLog.Sourse('GL_ARB_shading_language_100');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_shading_language_100';
	end;
SGIsSuppored_GL_ARB_texture_non_power_of_two:=Load_GL_ARB_texture_non_power_of_two;
if SGIsSuppored_GL_ARB_texture_non_power_of_two then
	begin
	SGLog.Sourse('GL_ARB_texture_non_power_of_two');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_non_power_of_two';
	end;
SGIsSuppored_GL_ARB_point_sprite:=Load_GL_ARB_point_sprite;
if SGIsSuppored_GL_ARB_point_sprite then
	begin
	SGLog.Sourse('GL_ARB_point_sprite');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_point_sprite';
	end;
SGIsSuppored_GL_EXT_depth_bounds_test:=Load_GL_EXT_depth_bounds_test;
if SGIsSuppored_GL_EXT_depth_bounds_test then
	begin
	SGLog.Sourse('GL_EXT_depth_bounds_test');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_depth_bounds_test';
	end;
SGIsSuppored_GL_EXT_texture_mirror_clamp:=Load_GL_EXT_texture_mirror_clamp;
if SGIsSuppored_GL_EXT_texture_mirror_clamp then
	begin
	SGLog.Sourse('GL_EXT_texture_mirror_clamp');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_texture_mirror_clamp';
	end;
SGIsSuppored_GL_EXT_blend_equation_separate:=Load_GL_EXT_blend_equation_separate;
if SGIsSuppored_GL_EXT_blend_equation_separate then
	begin
	SGLog.Sourse('GL_EXT_blend_equation_separate');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_blend_equation_separate';
	end;
SGIsSuppored_GL_MESA_pack_invert:=Load_GL_MESA_pack_invert;
if SGIsSuppored_GL_MESA_pack_invert then
	begin
	SGLog.Sourse('GL_MESA_pack_invert');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_MESA_pack_invert';
	end;
SGIsSuppored_GL_MESA_ycbcr_texture:=Load_GL_MESA_ycbcr_texture;
if SGIsSuppored_GL_MESA_ycbcr_texture then
	begin
	SGLog.Sourse('GL_MESA_ycbcr_texture');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_MESA_ycbcr_texture';
	end;
SGIsSuppored_GL_ARB_fragment_program_shadow:=Load_GL_ARB_fragment_program_shadow;
if SGIsSuppored_GL_ARB_fragment_program_shadow then
	begin
	SGLog.Sourse('GL_ARB_fragment_program_shadow');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_fragment_program_shadow';
	end;
SGIsSuppored_GL_NV_fragment_program_option:=Load_GL_NV_fragment_program_option;
if SGIsSuppored_GL_NV_fragment_program_option then
	begin
	SGLog.Sourse('GL_NV_fragment_program_option');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_fragment_program_option';
	end;
SGIsSuppored_GL_EXT_pixel_buffer_object:=Load_GL_EXT_pixel_buffer_object;
if SGIsSuppored_GL_EXT_pixel_buffer_object then
	begin
	SGLog.Sourse('GL_EXT_pixel_buffer_object');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_pixel_buffer_object';
	end;
SGIsSuppored_GL_NV_fragment_program2:=Load_GL_NV_fragment_program2;
if SGIsSuppored_GL_NV_fragment_program2 then
	begin
	SGLog.Sourse('GL_NV_fragment_program2');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_fragment_program2';
	end;
SGIsSuppored_GL_NV_vertex_program2_option:=Load_GL_NV_vertex_program2_option;
if SGIsSuppored_GL_NV_vertex_program2_option then
	begin
	SGLog.Sourse('GL_NV_vertex_program2_option');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_vertex_program2_option';
	end;
SGIsSuppored_GL_NV_vertex_program3:=Load_GL_NV_vertex_program3;
if SGIsSuppored_GL_NV_vertex_program3 then
	begin
	SGLog.Sourse('GL_NV_vertex_program3');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_NV_vertex_program3';
	end;
SGIsSuppored_GL_ARB_draw_buffers:=Load_GL_ARB_draw_buffers;
if SGIsSuppored_GL_ARB_draw_buffers then
	begin
	SGLog.Sourse('GL_ARB_draw_buffers');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_draw_buffers';
	end;
SGIsSuppored_GL_ARB_texture_rectangle:=Load_GL_ARB_texture_rectangle;
if SGIsSuppored_GL_ARB_texture_rectangle then
	begin
	SGLog.Sourse('GL_ARB_texture_rectangle');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_rectangle';
	end;
SGIsSuppored_GL_ARB_color_buffer_float:=Load_GL_ARB_color_buffer_float;
if SGIsSuppored_GL_ARB_color_buffer_float then
	begin
	SGLog.Sourse('GL_ARB_color_buffer_float');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_color_buffer_float';
	end;
SGIsSuppored_GL_ARB_half_float_pixel:=Load_GL_ARB_half_float_pixel;
if SGIsSuppored_GL_ARB_half_float_pixel then
	begin
	SGLog.Sourse('GL_ARB_half_float_pixel');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_half_float_pixel';
	end;
SGIsSuppored_GL_ARB_texture_float:=Load_GL_ARB_texture_float;
if SGIsSuppored_GL_ARB_texture_float then
	begin
	SGLog.Sourse('GL_ARB_texture_float');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_float';
	end;
SGIsSuppored_GL_EXT_texture_compression_dxt1:=Load_GL_EXT_texture_compression_dxt1;
if SGIsSuppored_GL_EXT_texture_compression_dxt1 then
	begin
	SGLog.Sourse('GL_EXT_texture_compression_dxt1');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_texture_compression_dxt1';
	end;
SGIsSuppored_GL_ARB_pixel_buffer_object:=Load_GL_ARB_pixel_buffer_object;
if SGIsSuppored_GL_ARB_pixel_buffer_object then
	begin
	SGLog.Sourse('GL_ARB_pixel_buffer_object');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_pixel_buffer_object';
	end;
SGIsSuppored_GL_EXT_framebuffer_object:=Load_GL_EXT_framebuffer_object;
if SGIsSuppored_GL_EXT_framebuffer_object then
	begin
	SGLog.Sourse('GL_EXT_framebuffer_object');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_EXT_framebuffer_object';
	end;
SGIsSuppored_GL_ARB_framebuffer_object:=Load_GL_ARB_framebuffer_object;
if SGIsSuppored_GL_ARB_framebuffer_object then
	begin
	SGLog.Sourse('GL_ARB_framebuffer_object');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_framebuffer_object';
	end;
SGIsSuppored_GL_ARB_map_buffer_range:=Load_GL_ARB_map_buffer_range;
if SGIsSuppored_GL_ARB_map_buffer_range then
	begin
	SGLog.Sourse('GL_ARB_map_buffer_range');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_map_buffer_range';
	end;
SGIsSuppored_GL_ARB_vertex_array_object:=Load_GL_ARB_vertex_array_object;
if SGIsSuppored_GL_ARB_vertex_array_object then
	begin
	SGLog.Sourse('GL_ARB_vertex_array_object');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_vertex_array_object';
	end;
SGIsSuppored_GL_ARB_copy_buffer:=Load_GL_ARB_copy_buffer;
if SGIsSuppored_GL_ARB_copy_buffer then
	begin
	SGLog.Sourse('GL_ARB_copy_buffer');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_copy_buffer';
	end;
SGIsSuppored_GL_ARB_uniform_buffer_object:=Load_GL_ARB_uniform_buffer_object;
if SGIsSuppored_GL_ARB_uniform_buffer_object then
	begin
	SGLog.Sourse('GL_ARB_uniform_buffer_object');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_uniform_buffer_object';
	end;
SGIsSuppored_GL_ARB_draw_elements_base_vertex:=Load_GL_ARB_draw_elements_base_vertex;
if SGIsSuppored_GL_ARB_draw_elements_base_vertex then
	begin
	SGLog.Sourse('GL_ARB_draw_elements_base_vertex');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_draw_elements_base_vertex';
	end;
SGIsSuppored_GL_ARB_provoking_vertex:=Load_GL_ARB_provoking_vertex;
if SGIsSuppored_GL_ARB_provoking_vertex then
	begin
	SGLog.Sourse('GL_ARB_provoking_vertex');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_provoking_vertex';
	end;
SGIsSuppored_GL_ARB_sync:=Load_GL_ARB_sync;
if SGIsSuppored_GL_ARB_sync then
	begin
	SGLog.Sourse('GL_ARB_sync');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_sync';
	end;
SGIsSuppored_GL_ARB_texture_multisample:=Load_GL_ARB_texture_multisample;
if SGIsSuppored_GL_ARB_texture_multisample then
	begin
	SGLog.Sourse('GL_ARB_texture_multisample');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_texture_multisample';
	end;
SGIsSuppored_GL_ARB_blend_func_extended:=Load_GL_ARB_blend_func_extended;
if SGIsSuppored_GL_ARB_blend_func_extended then
	begin
	SGLog.Sourse('GL_ARB_blend_func_extended');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_blend_func_extended';
	end;
SGIsSuppored_GL_ARB_sampler_objects:=Load_GL_ARB_sampler_objects;
if SGIsSuppored_GL_ARB_sampler_objects then
	begin
	SGLog.Sourse('GL_ARB_sampler_objects');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_sampler_objects';
	end;
SGIsSuppored_GL_ARB_timer_query:=Load_GL_ARB_timer_query;
if SGIsSuppored_GL_ARB_timer_query then
	begin
	SGLog.Sourse('GL_ARB_timer_query');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_timer_query';
	end;
SGIsSuppored_GL_ARB_vertex_type_2_10_10_10_rev:=Load_GL_ARB_vertex_type_2_10_10_10_rev;
if SGIsSuppored_GL_ARB_vertex_type_2_10_10_10_rev then
	begin
	SGLog.Sourse('GL_ARB_vertex_type_2_10_10_10_rev');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_vertex_type_2_10_10_10_rev';
	end;
SGIsSuppored_GL_ARB_gpu_shader_fp64:=Load_GL_ARB_gpu_shader_fp64;
if SGIsSuppored_GL_ARB_gpu_shader_fp64 then
	begin
	SGLog.Sourse('GL_ARB_gpu_shader_fp64');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_gpu_shader_fp64';
	end;
SGIsSuppored_GL_ARB_shader_subroutine:=Load_GL_ARB_shader_subroutine;
if SGIsSuppored_GL_ARB_shader_subroutine then
	begin
	SGLog.Sourse('GL_ARB_shader_subroutine');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_shader_subroutine';
	end;
SGIsSuppored_GL_ARB_tessellation_shader:=Load_GL_ARB_tessellation_shader;
if SGIsSuppored_GL_ARB_tessellation_shader then
	begin
	SGLog.Sourse('GL_ARB_tessellation_shader');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_tessellation_shader';
	end;
SGIsSuppored_GL_ARB_transform_feedback2:=Load_GL_ARB_transform_feedback2;
if SGIsSuppored_GL_ARB_transform_feedback2 then
	begin
	SGLog.Sourse('GL_ARB_transform_feedback2');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_transform_feedback2';
	end;
SGIsSuppored_GL_ARB_transform_feedback3:=Load_GL_ARB_transform_feedback3;
if SGIsSuppored_GL_ARB_transform_feedback3 then
	begin
	SGLog.Sourse('GL_ARB_transform_feedback3');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_ARB_transform_feedback3';
	end;
SGIsSuppored_GL_version_1_4:=Load_GL_version_1_4;
if SGIsSuppored_GL_version_1_4 then
	begin
	SGLog.Sourse('GL_version_1_4');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_version_1_4';
	end;
SGIsSuppored_GL_version_1_5:=Load_GL_version_1_5;
if SGIsSuppored_GL_version_1_5 then
	begin
	SGLog.Sourse('GL_version_1_5');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_version_1_5';
	end;
SGIsSuppored_GL_version_2_0:=Load_GL_version_2_0;
if SGIsSuppored_GL_version_2_0 then
	begin
	SGLog.Sourse('GL_version_2_0');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_version_2_0';
	end;
SGIsSuppored_GL_VERSION_2_1:=Load_GL_VERSION_2_1;
if SGIsSuppored_GL_VERSION_2_1 then
	begin
	SGLog.Sourse('GL_VERSION_2_1');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_VERSION_2_1';
	end;
SGIsSuppored_GL_VERSION_3_0:=Load_GL_VERSION_3_0;
if SGIsSuppored_GL_VERSION_3_0 then
	begin
	SGLog.Sourse('GL_VERSION_3_0');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_VERSION_3_0';
	end;
SGIsSuppored_GL_VERSION_3_1:=Load_GL_VERSION_3_1;
if SGIsSuppored_GL_VERSION_3_1 then
	begin
	SGLog.Sourse('GL_VERSION_3_1');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_VERSION_3_1';
	end;
SGIsSuppored_GL_VERSION_3_2:=Load_GL_VERSION_3_2;
if SGIsSuppored_GL_VERSION_3_2 then
	begin
	SGLog.Sourse('GL_VERSION_3_2');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_VERSION_3_2';
	end;
SGIsSuppored_GL_VERSION_3_3:=Load_GL_VERSION_3_3;
if SGIsSuppored_GL_VERSION_3_3 then
	begin
	SGLog.Sourse('GL_VERSION_3_3');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_VERSION_3_3';
	end;
SGIsSuppored_GL_VERSION_4_0:=Load_GL_VERSION_4_0;
if SGIsSuppored_GL_VERSION_4_0 then
	begin
	SGLog.Sourse('GL_VERSION_4_0');
	i+=1;
	end
else
	begin
	SetLength(Extendeds,Length(Extendeds)+1);
	Extendeds[High(Extendeds)]:='GL_VERSION_4_0';
	end;


SGLog.Sourse('} Suppored is '+SGStr(i)+' extendeds...');
SGLog.Sourse('SGOpenGLInit : Not supported is next extendeds ('+SGStr(Length(Extendeds))+') {');

for ii:=0 to High(Extendeds) do
	SGLog.Sourse(Extendeds[ii]);

SGLog.Sourse('}');
SGLog.Sourse('SGOpenGLInit : Total : Suppored '+SGStr(i)+' extendeds, not supppored '+SGStr(Length(Extendeds))+' extendeds...');

SetLength(Extendeds,0);
end;
{$ENDIF}
